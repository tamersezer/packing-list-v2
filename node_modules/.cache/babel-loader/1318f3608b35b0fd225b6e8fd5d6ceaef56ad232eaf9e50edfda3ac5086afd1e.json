{"ast":null,"code":"const API_URL='http://localhost:3001';export const productService={async getAll(){const response=await fetch(\"\".concat(API_URL,\"/products\"));if(!response.ok){throw new Error('Failed to fetch products');}return response.json();},async create(product){const response=await fetch(\"\".concat(API_URL,\"/products\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(product)});if(!response.ok){throw new Error('Failed to create product');}return response.json();},async delete(id){const response=await fetch(\"\".concat(API_URL,\"/products/\").concat(id),{method:'DELETE'});if(!response.ok){throw new Error('Failed to delete product');}},async update(id,product){const response=await fetch(\"\".concat(API_URL,\"/products/\").concat(id),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(product)});if(!response.ok){throw new Error('Failed to update product');}return response.json();}};export const hsCodeService={async getAll(){const response=await fetch(\"\".concat(API_URL,\"/hsCodes\"));if(!response.ok){throw new Error('Failed to fetch HS Codes');}const data=await response.json();return data.map(item=>item.code);},async add(hsCode){const response=await fetch(\"\".concat(API_URL,\"/hsCodes\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({code:hsCode})});if(!response.ok){throw new Error('Failed to add HS Code');}},async delete(code){const response=await fetch(\"\".concat(API_URL,\"/hsCodes\"));if(!response.ok){throw new Error('Failed to fetch HS Codes');}const data=await response.json();const item=data.find(item=>item.code===code);if(!item){throw new Error('HS Code not found');}const deleteResponse=await fetch(\"\".concat(API_URL,\"/hsCodes/\").concat(item.id),{method:'DELETE'});if(!deleteResponse.ok){throw new Error('Failed to delete HS Code');}}};export const packingListService={async getAll(){const response=await fetch(\"\".concat(API_URL,\"/packingLists\"));if(!response.ok){throw new Error('Failed to fetch packing lists');}return response.json();},async create(packingList){const response=await fetch(\"\".concat(API_URL,\"/packingLists\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(packingList)});if(!response.ok){throw new Error('Failed to create packing list');}return response.json();},async delete(id){const response=await fetch(\"\".concat(API_URL,\"/packingLists/\").concat(id),{method:'DELETE'});if(!response.ok){throw new Error('Failed to delete packing list');}},async update(id,packingList){const response=await fetch(\"\".concat(API_URL,\"/packingLists/\").concat(id),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(packingList)});if(!response.ok){throw new Error('Failed to update packing list');}return response.json();},async getById(id){const response=await fetch(\"\".concat(API_URL,\"/packingLists/\").concat(id));if(!response.ok){throw new Error('Failed to fetch packing list');}return response.json();}};","map":{"version":3,"names":["API_URL","productService","getAll","response","fetch","concat","ok","Error","json","create","product","method","headers","body","JSON","stringify","delete","id","update","hsCodeService","data","map","item","code","add","hsCode","find","deleteResponse","packingListService","packingList","getById"],"sources":["/Users/tamersezer/Cursor Projects/Deneme/src/services/api.ts"],"sourcesContent":["import type { Product } from '../types/Product';\nimport type { PackingList } from '../types/PackingList';\n\nconst API_URL = 'http://localhost:3001';\n\nexport const productService = {\n  async getAll(): Promise<Product[]> {\n    const response = await fetch(`${API_URL}/products`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch products');\n    }\n    \n    return response.json();\n  },\n\n  async create(product: Product): Promise<Product> {\n    const response = await fetch(`${API_URL}/products`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(product),\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to create product');\n    }\n    \n    return response.json();\n  },\n\n  async delete(id: string): Promise<void> {\n    const response = await fetch(`${API_URL}/products/${id}`, {\n      method: 'DELETE',\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to delete product');\n    }\n  },\n\n  async update(id: string, product: Product): Promise<Product> {\n    const response = await fetch(`${API_URL}/products/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(product),\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to update product');\n    }\n    \n    return response.json();\n  }\n};\n\nexport const hsCodeService = {\n  async getAll(): Promise<string[]> {\n    const response = await fetch(`${API_URL}/hsCodes`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch HS Codes');\n    }\n    \n    const data = await response.json();\n    return data.map((item: { code: string }) => item.code);\n  },\n\n  async add(hsCode: string): Promise<void> {\n    const response = await fetch(`${API_URL}/hsCodes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ code: hsCode }),\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to add HS Code');\n    }\n  },\n\n  async delete(code: string): Promise<void> {\n    const response = await fetch(`${API_URL}/hsCodes`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch HS Codes');\n    }\n    const data = await response.json();\n    \n    const item = data.find((item: { code: string }) => item.code === code);\n    if (!item) {\n      throw new Error('HS Code not found');\n    }\n    \n    const deleteResponse = await fetch(`${API_URL}/hsCodes/${item.id}`, {\n      method: 'DELETE',\n    });\n    \n    if (!deleteResponse.ok) {\n      throw new Error('Failed to delete HS Code');\n    }\n  }\n};\n\nexport const packingListService = {\n  async getAll(): Promise<PackingList[]> {\n    const response = await fetch(`${API_URL}/packingLists`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch packing lists');\n    }\n    \n    return response.json();\n  },\n\n  async create(packingList: PackingList): Promise<PackingList> {\n    const response = await fetch(`${API_URL}/packingLists`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(packingList),\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to create packing list');\n    }\n    \n    return response.json();\n  },\n\n  async delete(id: string): Promise<void> {\n    const response = await fetch(`${API_URL}/packingLists/${id}`, {\n      method: 'DELETE',\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to delete packing list');\n    }\n  },\n\n  async update(id: string, packingList: PackingList): Promise<PackingList> {\n    const response = await fetch(`${API_URL}/packingLists/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(packingList),\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to update packing list');\n    }\n    \n    return response.json();\n  },\n\n  async getById(id: string): Promise<PackingList> {\n    const response = await fetch(`${API_URL}/packingLists/${id}`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch packing list');\n    }\n    \n    return response.json();\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}