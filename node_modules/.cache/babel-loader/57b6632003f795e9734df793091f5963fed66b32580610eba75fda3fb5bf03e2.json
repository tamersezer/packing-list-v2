{"ast":null,"code":"export const api = {\n  API_URL: 'http://localhost:3002'\n};\nexport const productService = {\n  async getAll() {\n    const response = await fetch(`${api.API_URL}/products`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch products');\n    }\n    return response.json();\n  },\n  async create(product) {\n    const response = await fetch(`${api.API_URL}/products`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(product)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create product');\n    }\n    return response.json();\n  },\n  async delete(id) {\n    const response = await fetch(`${api.API_URL}/products/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete product');\n    }\n  },\n  async update(id, product) {\n    const response = await fetch(`${api.API_URL}/products/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(product)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update product');\n    }\n    return response.json();\n  }\n};\nexport const hsCodeService = {\n  async getAll() {\n    const response = await fetch(`${api.API_URL}/hsCodes`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch HS Codes');\n    }\n    const data = await response.json();\n    return data.map(item => item.code);\n  },\n  async add(hsCode) {\n    const response = await fetch(`${api.API_URL}/hsCodes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        code: hsCode\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add HS Code');\n    }\n  },\n  async delete(code) {\n    const response = await fetch(`${api.API_URL}/hsCodes`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch HS Codes');\n    }\n    const data = await response.json();\n    const item = data.find(item => item.code === code);\n    if (!item) {\n      throw new Error('HS Code not found');\n    }\n    const deleteResponse = await fetch(`${api.API_URL}/hsCodes/${item.id}`, {\n      method: 'DELETE'\n    });\n    if (!deleteResponse.ok) {\n      throw new Error('Failed to delete HS Code');\n    }\n  }\n};\nexport const packingListService = {\n  async getAll() {\n    const response = await fetch(`${api.API_URL}/packingLists`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch packing lists');\n    }\n    return response.json();\n  },\n  async create(packingList) {\n    const response = await fetch(`${api.API_URL}/packingLists`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(packingList)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create packing list');\n    }\n    return response.json();\n  },\n  async delete(id) {\n    const response = await fetch(`${api.API_URL}/packingLists/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete packing list');\n    }\n  },\n  async update(id, packingList) {\n    const response = await fetch(`${api.API_URL}/packingLists/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(packingList)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update packing list');\n    }\n    return response.json();\n  },\n  async getById(id) {\n    const response = await fetch(`${api.API_URL}/packingLists/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch packing list');\n    }\n    return response.json();\n  }\n};\nexport const authService = {\n  async login(username, password) {\n    const response = await fetch(`${api.API_URL}/users?username=${username}`);\n    const users = await response.json();\n    if (users.length === 0 || users[0].password !== password) {\n      throw new Error('Invalid credentials');\n    }\n    const user = users[0];\n    // Basit bir token oluştur\n    const token = btoa(`${username}:${password}`);\n    return {\n      token,\n      user\n    };\n  },\n  async getCurrentUser() {\n    const token = localStorage.getItem('token');\n    if (!token) throw new Error('No token found');\n\n    // Token'dan kullanıcı bilgilerini çıkar\n    const [username] = atob(token).split(':');\n    const response = await fetch(`${api.API_URL}/users?username=${username}`);\n    const users = await response.json();\n    if (users.length === 0) {\n      throw new Error('User not found');\n    }\n    return users[0];\n  },\n  async createUser(userData) {\n    const response = await fetch(`${api.API_URL}/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        ...userData,\n        id: crypto.randomUUID()\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create user');\n    }\n    return response.json();\n  }\n};","map":{"version":3,"names":["api","API_URL","productService","getAll","response","fetch","ok","Error","json","create","product","method","headers","body","JSON","stringify","delete","id","update","hsCodeService","data","map","item","code","add","hsCode","find","deleteResponse","packingListService","packingList","getById","authService","login","username","password","users","length","user","token","btoa","getCurrentUser","localStorage","getItem","atob","split","createUser","userData","crypto","randomUUID"],"sources":["/Users/tamersezer/Cursor Projects/Deneme/src/services/api.ts"],"sourcesContent":["import type { Product } from '../types/Product';\nimport type { PackingList } from '../types/PackingList';\n\nexport const api = {\n  API_URL: 'http://localhost:3002'\n};\n\nexport const productService = {\n  async getAll(): Promise<Product[]> {\n    const response = await fetch(`${api.API_URL}/products`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch products');\n    }\n    \n    return response.json();\n  },\n\n  async create(product: Product): Promise<Product> {\n    const response = await fetch(`${api.API_URL}/products`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(product),\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to create product');\n    }\n    \n    return response.json();\n  },\n\n  async delete(id: string): Promise<void> {\n    const response = await fetch(`${api.API_URL}/products/${id}`, {\n      method: 'DELETE',\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to delete product');\n    }\n  },\n\n  async update(id: string, product: Product): Promise<Product> {\n    const response = await fetch(`${api.API_URL}/products/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(product),\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to update product');\n    }\n    \n    return response.json();\n  }\n};\n\nexport const hsCodeService = {\n  async getAll(): Promise<string[]> {\n    const response = await fetch(`${api.API_URL}/hsCodes`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch HS Codes');\n    }\n    \n    const data = await response.json();\n    return data.map((item: { code: string }) => item.code);\n  },\n\n  async add(hsCode: string): Promise<void> {\n    const response = await fetch(`${api.API_URL}/hsCodes`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ code: hsCode }),\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to add HS Code');\n    }\n  },\n\n  async delete(code: string): Promise<void> {\n    const response = await fetch(`${api.API_URL}/hsCodes`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch HS Codes');\n    }\n    const data = await response.json();\n    \n    const item = data.find((item: { code: string }) => item.code === code);\n    if (!item) {\n      throw new Error('HS Code not found');\n    }\n    \n    const deleteResponse = await fetch(`${api.API_URL}/hsCodes/${item.id}`, {\n      method: 'DELETE',\n    });\n    \n    if (!deleteResponse.ok) {\n      throw new Error('Failed to delete HS Code');\n    }\n  }\n};\n\nexport const packingListService = {\n  async getAll(): Promise<PackingList[]> {\n    const response = await fetch(`${api.API_URL}/packingLists`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch packing lists');\n    }\n    \n    return response.json();\n  },\n\n  async create(packingList: PackingList): Promise<PackingList> {\n    const response = await fetch(`${api.API_URL}/packingLists`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(packingList),\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to create packing list');\n    }\n    \n    return response.json();\n  },\n\n  async delete(id: string): Promise<void> {\n    const response = await fetch(`${api.API_URL}/packingLists/${id}`, {\n      method: 'DELETE',\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to delete packing list');\n    }\n  },\n\n  async update(id: string, packingList: PackingList): Promise<PackingList> {\n    const response = await fetch(`${api.API_URL}/packingLists/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(packingList),\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to update packing list');\n    }\n    \n    return response.json();\n  },\n\n  async getById(id: string): Promise<PackingList> {\n    const response = await fetch(`${api.API_URL}/packingLists/${id}`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch packing list');\n    }\n    \n    return response.json();\n  }\n};\n\nexport const authService = {\n  async login(username: string, password: string) {\n    const response = await fetch(`${api.API_URL}/users?username=${username}`);\n    const users = await response.json();\n    \n    if (users.length === 0 || users[0].password !== password) {\n      throw new Error('Invalid credentials');\n    }\n\n    const user = users[0];\n    // Basit bir token oluştur\n    const token = btoa(`${username}:${password}`);\n    \n    return { token, user };\n  },\n\n  async getCurrentUser() {\n    const token = localStorage.getItem('token');\n    if (!token) throw new Error('No token found');\n\n    // Token'dan kullanıcı bilgilerini çıkar\n    const [username] = atob(token).split(':');\n    \n    const response = await fetch(`${api.API_URL}/users?username=${username}`);\n    const users = await response.json();\n    \n    if (users.length === 0) {\n      throw new Error('User not found');\n    }\n    \n    return users[0];\n  },\n\n  async createUser(userData: { username: string; password: string; isAdmin: boolean }) {\n    const response = await fetch(`${api.API_URL}/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        ...userData,\n        id: crypto.randomUUID()\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to create user');\n    }\n\n    return response.json();\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}